{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 *
 */
#}
<article{{ attributes.addClass('h-full') }}>


    <div class="flex flex-col justify-between h-full prose !max-w-none pb-4">
      <div>
        <h2>About this session</h2>
        
        <div class="mb-4 text-lg font-bold">{{ node.label }}</div>

        {% set tags = node.field_tags is defined ? node.field_tags : [] %}

        <div class="flex flex-wrap gap-2 mb-4">
          {% if node.field_session_type.0.entity.label is defined %}
            {% set session_type_label = node.field_session_type.0.entity.label %}
            <div class="px-2 rounded-full
              {% if session_type_label == 'Challenge session' %}
                bg-fs-red-300
              {% else %}
                bg-fs-green-300
              {% endif %}
            ">
              {{ session_type_label }}
            </div>
          {% endif %}
          
          {% for tag in tags %}
            {% if tag.entity.label is defined %}
              <div class="px-2 rounded-full bg-neutral-200">{{ tag.entity.label }}</div>
            {% endif %}
          {% endfor %}
        </div>
      
        <div class="mb-4">
          {% set speaker_items = [] %}
          {% for key, item in content.field_speakers %}
            {% if key is iterable or (key matches '/^\\d+$/' ) %}
              {% set speaker_items = speaker_items|merge([item]) %}
            {% endif %}
          {% endfor %}
          {% for item in speaker_items|slice(0, 4) %}
          <div>{{ item }}</div>
          {% endfor %}
        </div>  

        
          <div>
            {{ content.field_description }}
          </div>
      
      
      </div>
        
     
        <a href="{{ url }}" class="flex items-center gap-2 my-4 hover:no-underline group">View session details
          <span class="inline-block p-2 duration-150 ease-in transform border rounded-full border-fs-cyan-500 group-hover:border-fs-violet-400 group-hover:bg-fs-cyan-100">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"> 
              <path d="M14 5l7 7m0 0l-7 7m7-7H3" stroke-linecap="round" stroke-linejoin="round"></path>
            </svg>
          </span>
        </a>

  
      
    </div>


</article>